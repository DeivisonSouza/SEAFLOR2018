mat[ ,c(-1,-3)]
mat[-2,-1]                    # exclui a linha 2 e a coluna 1.
print(mat)
mat[-2,-1]                    # exclui a linha 2 e a coluna 1.
#-------------------------------------
#c) Substituindo elementos
mat <- matrix(1:6, nrow=2, ncol=3, byrow = TRUE,
dimnames = list(c("L1", "L2"),
c("C1", "C2", "C3")))
print(mat)
# substitui o elemento da posição 1, por zero.
mat[1, 1] <- 0
print(mat)
# substitui os elementos das posiçoes 1 e 5, por zero.
# Obs.: observe a forma de contagem das posições!
mat[c(1,5)]
# substitui os elementos das posiçoes 1 e 5, por zero.
# Obs.: observe a forma de contagem das posições!
mat[c(1,4)]
mat
mat[1,4]
mat[c(1,4)]
print(mat)
mat[c(1,5)] <- c(0,0)
print(mat)
invFlor.2 <- data.frame(
especie = c("Acapu", "Araucaria", "Mogno", "Cedro", "Ipe"),
diametro = c(23.0, 27.0, 33.6, 42.6, 52.1),
altura = c(8.4, 8.7, 9.1, 13.2, 15.4),
cortar = c("Não", "Não", "Não", "Não", "Sim"),
stringsAsFactors = TRUE)
View(invFlor.2)
invFlor.2[2,1]                                    # similar as matrizes
invFlor.2[[2,1]]                                  # similar as listas
invFlor.2[ , c(1,2,4), drop=FALSE]                 # drop = FALSE
invFlor.2[c(1,2), c("especie","diametro")]        # mais específico
invFlor.2[ , c(1,2,4), drop=FALSE]                 # drop = FALSE
View(invFlor.2)
View(invFlor.2)
invFlor.2$diametro
invFlor.2$[diametro]
invFlor.2$diametro
invFlor.2$diametro              # acessa a coluna diâmetro.
invFlor.2$cortar                # acessa a coluna cortar.
invFlor.2$cortar
# acessa a coluna cortar e extrai os elementos da posição 4 e 5.
invFlor.2$cortar[c(4,5)]
# Quais valores de altura são maiores do que 10m?
invFlor.2$altura > 10
# Quais valores de diâmetro são maiores ou iguais a 50cm?
invFlor.2$diametro >= 50
View(invFlor.2)
View(invFlor.2)
# Quais árvores possuem “Sim” para “Corte”?
invFlor.2$cortar == "Sim"
invFlor.2[invFlor.2$altura > 10,]
# Quais valores de diâmetro são maiores ou iguais a 50cm?
invFlor.2[invFlor.2$diametro >= 50,]
# Quais árvores possuem “Sim” para “Corte”?
invFlor.2[invFlor.2$cortar == "Sim",]
# Extrai árvores com diâmetros < 50cm e não disponíveis p/ corte
invFlor.2[invFlor.2$diametro < 50 & invFlor.2$cortar == "Não", ]
View(invFlor.1)
#A função attach() oferece acesso direto aos vetores do data frame. Para finalizar seu uso deve-se
#utilizar a função detach().
invFlor.2$diametro
diametro
detach(invFlor.2)
#A função attach() oferece acesso direto aos vetores do data frame. Para finalizar seu uso deve-se
#utilizar a função detach().
invFlor.2$diametro
diametro
rm(diametro)
#A função attach() oferece acesso direto aos vetores do data frame. Para finalizar seu uso deve-se
#utilizar a função detach().
invFlor.2$diametro
diametro
#A função attach() oferece acesso direto aos vetores do data frame. Para finalizar seu uso deve-se
#utilizar a função detach().
invFlor.2$diametro
diametro
#A função attach() oferece acesso direto aos vetores do data frame. Para finalizar seu uso deve-se
#utilizar a função detach().
invFlor.2$diametro
diametro
attach(invFlor.2)
diametro              # acessa direto ao diâmetro.
cortar                # acessa direto a coluna cortar.
cortar                # acessa direto a coluna cortar.
Altura
altura
detach(invFlor.2)
cortar
diametro
# Uma lista cujos componentes não estão nomeados
list.2 <- list(diametro, mat.8, invFlor.1)
diametro <- c(23.0, 27.0, 33.6, 42.6, 52.1)
# Uma lista cujos componentes não estão nomeados
list.2 <- list(diametro, mat.8, invFlor.1)
list.2
list.2[[1]]
list.2[[2]]
list.2[[3]]
list.2[[2]][1,]
list.2[[3]]
list.2[[3]][diametro > 50 & cortar == "Sim", ]
list.2 <- list(diametro=diametro, matriz=mat.8, DF=invFlor.1)
print(list.2)
list.2$diametro
list.2$DF
mean(diametro)
length(diametro)
sum(diametro)
sum(diametro)/length(diametro)
mean(diametro)
Media <- function(x){
n = length(x)
Soma=sum(x)
Media=Soma/n
return(Media)
}
Media(x=diametro)
Media(x=altura)
mean(altura)
Media <- function(x){
n = length(x)
Soma=sum(x)
Media=Soma/n
return(n)
}
Media(x=altura)
Media <- function(x){
n = length(x)
Soma=sum(x)
Media=Soma/n
return(c(n,Media,Soma))
}
Media(x=altura)
Media <- function(x){
n = length(x)
Soma=sum(x)
Media=Soma/n
return(c(n=n,Media=Media,Soma=Soma))
}
Media(x=altura)
Media <- function(x){
n = length(x)
Soma=sum(x)
Media=Soma/n
return(c(n=n,Media=Media,Soma=Soma))
}
Media(x=altura)
CV(diametro)
CV <- function(x){
Media = sum(x)/length(x)
DP = sqrt(sum((x-mean(x))^2)/(length(x)-1))
CV = (DP/Media)*100
return(CV)
}
CV(diametro)
descritivas.1 <-
function(x){
n <- length(x)
Soma <- sum(x)
Media <- round(sum(x)/n, digits=2)
Variancia <- var(x)
DP <- round(sd(x), digits=2)
CV <- round((DP/Media)*100,digits=2)
Minimo <- min(x)
Quartil1 <- quantile(x,0.25)
Mediana <- median(x)
Quartil3 <- quantile(x,0.75)
Interquatil <- Quartil3-Quartil1
Maximo <- max(x)
return(list(n=n,Media=Media,DP=DP,CV=CV,Min=Minimo,
Q1=Quartil1,Md=Mediana,Q3=Quartil3,
Interquatil=Interquatil,Max=Maximo))
}
trees
descritivas.1 <-
function(x){
n <- length(x)
Soma <- sum(x)
Media <- round(sum(x)/n, digits=2)
Variancia <- var(x)
DP <- round(sd(x), digits=2)
CV <- round((DP/Media)*100,digits=2)
Minimo <- min(x)
Quartil1 <- quantile(x,0.25)
Mediana <- median(x)
Quartil3 <- quantile(x,0.75)
Interquatil <- Quartil3-Quartil1
Maximo <- max(x)
return(list(n=n,Media=Media,DP=DP,CV=CV,Min=Minimo,
Q1=Quartil1,Md=Mediana,Q3=Quartil3,
Interquatil=Interquatil,Max=Maximo))
}
descritivas.1(x=trees$Volume)
library("data.table")
FOM <- fread("Fito.csv")
library("data.table")
FOM <- fread("Fito.csv")
FOM
nrow(FOM)
names(FOM)
dim(FOM)
# n = Número total de indivíduos amostrados na j-ésima parcela
FOM[, .(n=.N), by=Parcela][]
# Número de indivíduos amostrados da i-ésima espécie na j-ésima parcela
FOM[, .(ni=.N), by=c("Parcela", "Especie")]
# Uma visualização gráfica
ggplot(FOM[, .(ni=.N), by=c("Parcela", "Especie")],
aes(x=Especie, y=ni, fill=Especie)) +
geom_bar(stat="identity",position="dodge",width = 1,colour="black")+
geom_text(aes(label=ni,hjust=-.3, vjust=0.5),
position=position_dodge(width = 0.7))+
facet_grid(~ Parcela, labeller=labeller(
Parcela = Parcela<-as_labeller(
c(`1`="Parcela 1",`2`="Parcela 2",`3`="Parcela 3"))))+
coord_flip()+
geom_text(data=ddply(.data=FOM, .(Parcela), summarize,
n=paste("n =", length(Especie))),
aes(x=23, y=7, label=n), colour="black",
inherit.aes=FALSE, parse=FALSE)+
theme_bw()+
theme(axis.line.x=element_line(size=0.5,colour="black"),
axis.line.y=element_line(size=0.5,colour="black"),
axis.line=element_line(size=1,colour="black"),
strip.text.x=element_text(colour=1,size=12,family="serif",face="bold"),
strip.background = element_rect(colour="black", fill="snow2"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_rect(color="black"),
panel.background=element_blank(),
axis.text.x=element_text(colour="black",size=12,family="serif",angle=0),
axis.text.y=element_text(colour=1,size=12,family="serif",face="italic"),
legend.position="none")+
scale_x_discrete(name="Espécie")+
scale_y_continuous(name="Número de indivíduos",
limits=c(0,8))
# Uma visualização gráfica
library(ggplot2)
ggplot(FOM[, .(ni=.N), by=c("Parcela", "Especie")],
aes(x=Especie, y=ni, fill=Especie)) +
geom_bar(stat="identity",position="dodge",width = 1,colour="black")+
geom_text(aes(label=ni,hjust=-.3, vjust=0.5),
position=position_dodge(width = 0.7))+
facet_grid(~ Parcela, labeller=labeller(
Parcela = Parcela<-as_labeller(
c(`1`="Parcela 1",`2`="Parcela 2",`3`="Parcela 3"))))+
coord_flip()+
geom_text(data=ddply(.data=FOM, .(Parcela), summarize,
n=paste("n =", length(Especie))),
aes(x=23, y=7, label=n), colour="black",
inherit.aes=FALSE, parse=FALSE)+
theme_bw()+
theme(axis.line.x=element_line(size=0.5,colour="black"),
axis.line.y=element_line(size=0.5,colour="black"),
axis.line=element_line(size=1,colour="black"),
strip.text.x=element_text(colour=1,size=12,family="serif",face="bold"),
strip.background = element_rect(colour="black", fill="snow2"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_rect(color="black"),
panel.background=element_blank(),
axis.text.x=element_text(colour="black",size=12,family="serif",angle=0),
axis.text.y=element_text(colour=1,size=12,family="serif",face="italic"),
legend.position="none")+
scale_x_discrete(name="Espécie")+
scale_y_continuous(name="Número de indivíduos",
limits=c(0,8))
# Uma visualização gráfica
library(ggplot2)
library(ddply)
# Uma visualização gráfica
library(ggplot2)
require(plyr)
ggplot(FOM[, .(ni=.N), by=c("Parcela", "Especie")],
aes(x=Especie, y=ni, fill=Especie)) +
geom_bar(stat="identity",position="dodge",width = 1,colour="black")+
geom_text(aes(label=ni,hjust=-.3, vjust=0.5),
position=position_dodge(width = 0.7))+
facet_grid(~ Parcela, labeller=labeller(
Parcela = Parcela<-as_labeller(
c(`1`="Parcela 1",`2`="Parcela 2",`3`="Parcela 3"))))+
coord_flip()+
geom_text(data=ddply(.data=FOM, .(Parcela), summarize,
n=paste("n =", length(Especie))),
aes(x=23, y=7, label=n), colour="black",
inherit.aes=FALSE, parse=FALSE)+
theme_bw()+
theme(axis.line.x=element_line(size=0.5,colour="black"),
axis.line.y=element_line(size=0.5,colour="black"),
axis.line=element_line(size=1,colour="black"),
strip.text.x=element_text(colour=1,size=12,family="serif",face="bold"),
strip.background = element_rect(colour="black", fill="snow2"),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border=element_rect(color="black"),
panel.background=element_blank(),
axis.text.x=element_text(colour="black",size=12,family="serif",angle=0),
axis.text.y=element_text(colour=1,size=12,family="serif",face="italic"),
legend.position="none")+
scale_x_discrete(name="Espécie")+
scale_y_continuous(name="Número de indivíduos",
limits=c(0,8))
DAi <- function(x, A){
ni <- nrow(subset(FOM, Especie=="Araucaria angustifolia"))
DAi <- ni/A
return(DAi)
}
DAi(x = FOM$Especie, A = 0.3)
DRi <- function(x, A){
ni <- nrow(subset(FOM, Especie=="Araucaria angustifolia"))
DAi <- ni/A
DTA <- length(x)/A
DRi <- (DAi/DTA)*100
return(DRi)
}
DRi(x = FOM$Especie, A = 0.3)
DoAi <- function(data, A, ...){
data <- data[Especie=="Araucaria angustifolia"]
gi <- data[, .(gi=pi*DAP^2/40000)]
Gi <- sum(gi)
DoAi <- Gi/A
return(DoAi)
}
DoAi(data=FOM, A=0.3)
# Uma função genérica
EH <- function(species, sample, d, A,...){
DT <- data.table(species=species,sample=sample,d=d)
DT <- DT[,`:=`(gi=pi*d^2/40000)]
Ui <- unique(DT, by=c("species", "sample"))[, .(Ui=.N), by="species"][order(species)]
ni <- DT[, .(ni=.N, Gi = sum(gi)), by="species"]
ni <- ni[Ui,on="species"]
EH <- ni[,DAi := ni/A,
][,DRi := (DAi/sum(DAi))*100,
][,DoAi := Gi/A,
][,DoRi := (DoAi/sum(DoAi))*100,
][,VC := DRi + DoRi,
][,PC := VC/2,
][,FAi := (Ui/length(unique(DT$sample)))*100,
][,FRi := (FAi/sum(FAi))*100,
][,VIi := DRi + DoRi + FRi,
][,PIi := VIi/3][order(-VIi)]
return(EH)
}
EH(species=FOM$Especie, sample=FOM$Parcela, d=FOM$DAP, A=0.3)
E <- function(x){
media = mean(x)
E = signif(0.1*media, 4)
return(E)
}
# Amostragem Inteiramente Aleatória
#########################################################
library("data.table")
dados <- fread("AAS.csv")
View(dados)
E <- function(x){
media = mean(x)
E = signif(0.1*media, 4)
return(E)
}
E(x=dados$Volume)
N <- ceiling(400000/600)
N
F <- signif(nrow(dados)/N,4)
F <- (600*16)/400000
F
FC <- function(x,A,a){
n <- length(x)
N <- ceiling(A/a)
Fracao <- n/N
FC <- 1-Fracao
if(FC >= 0.98){
print("A população é Infinita")
}else{
print("A população é Finita")
}
return(FC)
}
FC(x = dados$Volume, A = 400000, a = 600)
FC(x = dados$Volume, A = 400000, a = 600)
n <- function(x,A,a){
N <- ceiling(A/a)
E = 0.1*mean(x)
t = qt(1-.05/2, df=length(x)-1)
n <- ceiling((N*t^2*var(x))/(N*E^2 + t^2*var(x)))
print(paste("Para atender o LE estabelecido você deve amostrar", n, "parcelas"))
if(n <= length(x)){
print("Esforço amostral satisfatório")
}else{
print(paste("Retorne a campo e meça mais", abs(length(x)-n), "parcelas"))
}
}
n(x = dados$Volume, A = 400000, a = 600)
n <- function(x,A,a){
N <- ceiling(A/a)
E = 0.1*mean(x)
t = qt(1-.05/2, df=length(x)-1)
n <- ceiling((N*t^2*var(x))/(N*E^2 + t^2*var(x)))
print(paste("Para atender o LE estabelecido você deve amostrar", n, "parcelas"))
if(n >= length(x)){
print("Esforço amostral satisfatório")
}else{
print(paste("Retorne a campo e meça mais", abs(length(x)-n), "parcelas"))
}
}
n(x = dados$Volume, A = 400000, a = 600)
n <- function(x,A,a){
N <- ceiling(A/a)
E = 0.1*mean(x)
t = qt(1-.05/2, df=length(x)-1)
n <- ceiling((N*t^2*var(x))/(N*E^2 + t^2*var(x)))
print(paste("Para atender o LE estabelecido você deve amostrar", n, "parcelas"))
if(n <= length(x)){
print("Esforço amostral satisfatório")
}else{
print(paste("Retorne a campo e meça mais", abs(length(x)-n), "parcelas"))
}
}
n(x = dados$Volume, A = 400000, a = 600)
# Variância da média
var(dados$Volume)/length(dados$Volume) #falta FC quando finita
# Erro padrão da média
Sx <- (sd(dados$Volume)/sqrt(length(dados$Volume)))*sqrt(0.976)
Sx
# Erro de amostragem absoluto
Ea <- qt(1-.05/2, df=length(dados$Volume)-1)*Sx
Ea
# Erro de amostragem relativo
Er <- (Ea/mean(dados$Volume))*100
Er
# Intervalo de confiança para média
# Limite Inferior
LI <- mean(dados$Volume) - Ea
LI
LS <- mean(dados$Volume) + Ea
LS
Total <- ceiling(400000/600)*mean(dados$Volume)
Total
# Intervalo de confiança para total da população
# Limite Inferior
LIP <- Total - ceiling(400000/600)*Ea
LIP
LSP <- Total + ceiling(400000/600)*Ea
LSP
AIA <- function(x,A,a){
FP <- 10000/a
x <- x*FP
Soma <- sum(x)
Média <- mean(x, na.rm = TRUE)
Variância <- var(x)
N <- ceiling(A/a)
f <- length(x)/N
FC <- 1-f
E = 0.1*mean(x)
t = qt(1-.05/2, df=length(x)-1)
if(FC >= 0.98){
cat("\n---------------------------------------------------------------\nA população é Infinita\n")
n <- ceiling((t^2*var(x))/E^2)
cat("Para atender o LE estabelecido você deve amostrar", n, "parcelas\n")
VarM <- var(x)/length(x)
SdM <- sqrt(VarM)
Ea <- t*SdM
Er <- (Ea/Média)*100
ICI <- Média - Ea
ICS <- Média + Ea
TotPop <- N*Média
ICIP <- ICI*A
ICSP <- ICS*A
if(n <= length(x)){
cat("Esforço amostral satisfatório")
}else{
cat("Retorne a campo e meça mais", abs(length(x)-n), "parcelas")
}
}else{
cat("\n---------------------------------------------------------------\nA população é Finita -", "FC =",round(FC,3),"\n")
n <- ceiling((N*t^2*var(x))/(N*E^2 + t^2*var(x)))
cat("Para atender o LE estabelecido você deve amostrar", n, "parcelas\n")
VarM <- var(x)/length(x)*FC
SdM <- (sd(x)/sqrt(length(x)))*sqrt(FC)
Ea <- t*SdM
Er <- (Ea/Média)*100
ICI <- Média - Ea
ICS <- Média + Ea
TotPop <- N*Média
ICIP <- ICI*A
ICSP <- ICS*A
if(n <= length(x)){
cat("Esforço amostral satisfatório")
}else{
cat("ATENÇÃO: Retorne a campo e meça mais", abs(length(x)-n), "parcelas")
}
}
cat("\n---------------------------------------------------------------\n")
df <- format(data.frame(Parâmetros=c("Soma", "Média", "Número de amostras possíveis", "Fração de amostragem",
"Erro máximo admissível", "t-student", "Intensidade amostral",
"Variância da média", "Erro padrão da Média",
"Erro de amostragem absoluto", "Erro de amostragem relativo",
"IC inferior para média", "IC superior para média",
"Total da população", "IC inferior para total da população",
"IC superior para total da população"),
Estimativas=c(Soma, Média, N, f, E, t, n,
VarM, SdM, Ea, Er, ICI, ICS,
TotPop, ICIP, ICSP)), justify = "right",
digits = 6, nsmall=3, scientific=FALSE)
return(df)
}
AIA(x = dados$Volume, A = 400000, a = 600)
ASS<-AIA(x = dados$Volume, A = 400000, a = 600)
View(ASS)
